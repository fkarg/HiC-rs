

Meeting 2019-04-01
Try to:
- (info: library: dist-utils)
- (wichtig: setup.py!)
- Verpacke als Python Package (including Rust-parts!)
- Erstelle Bioconda-Paket
- Thesis-anfang: mehr Passiv schreiben !! kein just/now/here/...
- Implementiere eigentlichen Algorithmus

Actually did:


Meeting 2019-03-11:
- SSE: vier operationen k√∂nnen parrallel berechnet werden
- test rust-numpy for usability
- try to access + modify data, index, indptr from csr_matrix in Rust
    - copy it in Rust, start to implement algorithm, easy, single-core etc
- notebook look at HiC-data (hicinfo.py)
- install in environment: HiCExplorer, notebook (jupyter/ipython)




Work done:

Meeting 2019-03-04:

primary:
- conda package in channel creation

additional:
- can we access the python datatype from rust directly? (scipy.sparse.csr_matrix)
- implement using (sparse) symmetric matrix


Result:





2019-03-04:
compared different ways to use rust from python
Meeting 2019-03-04:

- compare different ways to use rust from python


Result: 
main three ways:
- pyO3: more or less impossible to write idiomatic rust. requires nightly.
- rust-cpython: possible to use pure rust, but has weird wrapper around it
- dylib (c-lib): needs to communicate over c-types, but works quite well otherwise
